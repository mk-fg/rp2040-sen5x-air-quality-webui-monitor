[wifi]
## Client Mode
# Multiple networks can be defined and will fallback in order
# Wifi is not required
# https://docs.micropython.org/en/latest/library/network.WLAN.html
# country: Get or set the two-letter ISO 3166-1 Alpha-2 country code to be used for radio compliance 
# https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2
# XX=worldwide US=United States
# pm: performance/powersave/none
# hostname: Device name to be used when connecting must be <32 characters
# channel: Wifi channel number
# hidden: yes/no
# scan_interval: interval between ssid scans when not yet connected
# check-interval: how often to check if connection is still alive to do ssid rescan

# Global defines, applying to all networks
country = XX
verbose = yes

ssid = yourwifinetwork
key = yourpassword
pm = powersave
scan_interval = 20
check_interval = 120

ssid = backupwifinetwork
key = yourpassword
pm = powersave
scan_interval = 20
check_interval = 120

[sensor]
## Make sure I2C<n> and GP<pin> numbers are correct here
## sen5x has a bunch of tuning parameters for its algorithms
## These are not exposed here, but are easy to send in the code
verbose = yes

# These values are passed to machine.I2C()
# https://docs.micropython.org/en/latest/library/machine.I2C.html
# Define what bus the i2c pins use https://www.raspberrypi.com/documentation/microcontrollers/raspberry-pi-pico.html#pinout-and-design-files-2
i2c-n = 0
# Define SDA and SCL Pins (on the rp2040)
i2c-pin-sda = 0
i2c-pin-scl = 1
# default 0x69 address for sen5x from datasheet
i2c-addr = 105 
# for machine.I2C init, datasheet says 100kbps max
i2c-freq = 100_000 
# in milliseconds, for machine.I2C init
i2c-timeout = 50.0 
# abort on >8 i2c errs in 3 (m)ins (or (s)ecs, (h)ours, (d)ays)
i2c-error-limit = 8 / 3m

# sample-interval: interval between getting new sensor data, in seconds
# sen5x have minimum 1s sampling interval, so shouldn't be lower than that
sample-interval = 60.0

# sample-count: how many most recent data samples to keep for export/display via webui
# Data is stored in volatile RAM, and will be lost on reset/power-cycle, unless exported
# Samples are 16B in size, so 1K samples ~ 16 KiB, RP2040 has <264 KiB
sample-count = 1_000

# error-check-interval: seconds between polling sen5x status for warnings/errors
# These are hw issues like fan/laser or electronics failure, should be very rare
#error-check-interval = 3701

# stop-on-exit: whether to stop sen5x measurement mode if script exits/crashes
# sen5x devices need to be running for some time for better accuracy,
#  so can be useful to disable if script is started/stopped on-timer/demand,
#  to avoid winding the sensor down needlessly. Defaults to "yes".
#stop-on-exit = yes

# reset-on-start: send "reboot" command to sensor firmware on startup
# This is same as power cycle, so shouldn't be useful if it starts w/ rp2040 anyway
#reset-on-start = no

# temp-comp-*: temperature compensation parameters
# Values don't need scale factor, e.g. "offset = -3.2" will apply negative 3.2Â°C T offset.
# offset/slope are float values, time-const is integer (seconds). Set before all measurements.
# See SEN5x datasheet and Sensirion "Temperature Acceleration (STAR Engine)
#  and Compensation Instructions for SEN5x" PDF for more details on how to use these values.
#temp-comp-offset = 0
#temp-comp-slope = 0
#temp-comp-time-const = 0


[webui]
## Parameters for webui display and http(s) data export
verbose = yes

#port = 80
#conn-backlog = 5
#title = RP2040 SEN5x Air Quality Monitor

# url-prefix: string to add/strip for every URL, if these are behind some reverse-proxy
#url-prefix = /sensor-A/

# marks-storage-bytes: fixed buffer size to allocate for graph-marks when first saving those
# Each graph mark-line takes 6B + label, so shouldn't normally take too much memory
#marks-storage-bytes = 512

# d3-load-from-internet: whether to enable loading D3.js visualization library
#  from cdn.jsdelivr.net on the internet, instead from the device, same as other stuff.
# Defaults to "no", i.e. everything in WebUI is only loaded from the device itself.
# Can be useful to enable if device does not have flash space for it, for testing,
#  to always use latest supported version that way, or if loading it like this is faster.
#d3-load-from-internet = no
#d3-api = 7


[alerts]
## Options to send UDP over-threshold alert packets, default-disabled.
## Not intended for serious alerting/monitoring, but for stuff like desktop notifications.
verbose = yes

# min/max-*: generate UDP alerts for values over threshold
# If enabled and send-to ip:port specified too, when sample has values outside
#  of these min/max bounds, it will be sent via UDP packet to set destination(s).
# Disabled if no min/max values are defined. All supported thresholds are listed below.
#max-pm = 30
#max-voc = 300
#max-nox = 300
#min-t = 0
#max-t = 40
#min-rh = 0
#max-rh = 75

# send-to: destination(s) to send alert UDP-packets to
# Multple space-separated IP:port values can be specified to send multiple packets
# Packet format: sen5x-sample || space-separated-over-threshold-keys || crc-16f/5
# Alert packet can get a response with time-delta to temporarily disable that alert for that host
#send-to = 10.1.2.3:4567

# bind-port: which port to send packets from and listen on for replies, defaults to 5683
# Space-separated keys from alerts can be sent back here to disable alerts for a time
# Such replies are intended to be used as a receiver confirmation mechanism
# If they are not used, alert packets will keep being sent for every processed data sample
# Expected packet format: time-delta-sec [double] || keys || crc-16f/5
#bind-port = 5683
