[wifi]
## Settings before ssid= will be defaults for all APs below
## SSIDs from scan results are prioritized in same order as they're listed here
## All AP parameters are for micropython's WLAN.config() -
##  see https://docs.micropython.org/en/latest/library/network.WLAN.html

# "country" and "verbose" parameters are always set globally
country = XX
verbose = yes

# scan-interval: interval between ssid scans when not yet connected
scan-interval = 20.56
# check-interval: how often to check if connection is still alive to do ssid rescan
check-interval = 20

pm = powersave
#hostname = myrp2
#hidden = yes

ssid=/ᐠ.ꞈ.ᐟ\
key=trunk yam blaze score boat

ssid=Password is Password
key=Password
#pm=performance
check-interval = 120


[sensor]
## Make sure I2C<n> and GP<pin> numbers are correct here
## sen5x has a bunch of tuning parameters for its algorithms
## These are not exposed here, but are easy to send in the code
verbose = yes

i2c-n = 0
i2c-pin-sda = 0
i2c-pin-scl =1
#i2c-addr = 105 - default 0x69 address for sen5x from datasheet
#i2c-freq = 100_000 - for machine.I2C init, datasheet says 100kbps max
#i2c-timeout = 50.0 - in milliseconds, for machine.I2C init
#i2c-error-limit = 8 / 3m - abort on >8 i2c errs in 3 (m)ins (or (s)ecs, (h)ours, (d)ays)

# sample-interval: interval between getting new sensor data, in seconds
# sen5x have minimum 1s sampling interval, so shouldn't be lower than that
sample-interval = 60.0

# sample-count: how many data samples to buffer for export/display via webui
# Samples are 16B in size, so 1K samples = 16 KiB, RP2040 has <264 KiB
sample-count = 1_000

# error-check-interval: seconds between polling sen5x status for warnings/errors
# These are hw issues like fan/laser or electronics failure, should be very rare
#error-check-interval = 3701

# stop-on-errors: whether to stop sen5x measurement mode if script exits/crashes
# sen5x devices need to be running for some time for better accuracy,
#  so can be useful to disable if script is started/stopped on-timer/demand,
#  to avoid winding the sensor down needlessly. Defaults to "yes".
#stop-on-exit = yes

# reset-on-start: send "reboot" command to sensor firmware on startup
# This is same as power cycle, so shouldn't be useful if it starts w/ rp2040 anyway
#reset-on-start = no


[webui]
## Parameters for webui display and http(s) data export

#port = 80
#conn-backlog = 5
verbose = yes

# url-prefix: string to add/strip for every URL, if these are behind some reverse-proxy
#url-prefix = /sensor-A/

# d3-load-from-internet: whether to enable loading D3.js visualization library
#  from cdn.jsdelivr.net on the internet, instead from the device, same as other stuff.
# Defaults to "no", i.e. everything in WebUI is only loaded from the device itself.
# Can be useful to enable if device does not have flash space for it, for testing,
#  to always use latest supported version that way, or if loading it like this is faster.
#d3-load-from-internet = no
#d3-api = 7
